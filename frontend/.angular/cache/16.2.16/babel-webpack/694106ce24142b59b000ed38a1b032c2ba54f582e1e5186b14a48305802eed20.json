{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { Validators, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../../../services/auth.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"../../../../shared/services/toast.service\";\nimport * as i5 from \"@angular/common\";\nfunction LoginComponent_span_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 20);\n  }\n}\nfunction LoginComponent_div_29_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 21);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.error, \" \");\n  }\n}\nclass LoginComponent {\n  constructor(fb, authService, router, toastService) {\n    this.fb = fb;\n    this.authService = authService;\n    this.router = router;\n    this.toastService = toastService;\n    this.isLoading = false;\n    this.error = null;\n    this.loginForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', Validators.required]\n    });\n  }\n  ngOnInit() {\n    if (this.authService.isAuthenticated()) {\n      this.router.navigate(['/products']);\n    }\n  }\n  onSubmit() {\n    if (this.loginForm.invalid) {\n      return;\n    }\n    this.isLoading = true;\n    this.error = null;\n    const {\n      email,\n      password\n    } = this.loginForm.value;\n    this.authService.login({\n      email,\n      password\n    }).subscribe({\n      next: () => {\n        this.isLoading = false;\n        this.toastService.success('Login successful');\n        this.router.navigate(['/products']);\n      },\n      error: err => {\n        this.isLoading = false;\n        this.error = err;\n        this.toastService.error(err);\n      }\n    });\n  }\n  get email() {\n    return this.loginForm.get('email');\n  }\n  get password() {\n    return this.loginForm.get('password');\n  }\n  static {\n    this.ɵfac = function LoginComponent_Factory(t) {\n      return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i4.ToastService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: LoginComponent,\n      selectors: [[\"app-login\"]],\n      standalone: true,\n      features: [i0.ɵɵStandaloneFeature],\n      decls: 30,\n      vars: 8,\n      consts: [[1, \"container\", 2, \"padding-top\", \"100px\"], [1, \"row\", \"justify-content-center\"], [1, \"col-md-6\", \"col-lg-4\"], [1, \"card\", \"shadow-sm\"], [1, \"card-body\", \"p-4\"], [1, \"text-center\", \"mb-4\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"mb-3\"], [\"for\", \"email\", 1, \"form-label\"], [\"type\", \"email\", \"id\", \"email\", \"formControlName\", \"email\", 1, \"form-control\"], [1, \"invalid-feedback\"], [\"for\", \"password\", 1, \"form-label\"], [\"type\", \"password\", \"id\", \"password\", \"formControlName\", \"password\", 1, \"form-control\"], [1, \"d-grid\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [\"class\", \"spinner-border spinner-border-sm me-2\", \"role\", \"status\", 4, \"ngIf\"], [1, \"text-center\", \"mt-3\"], [1, \"mb-0\"], [\"routerLink\", \"/auth/register\"], [\"class\", \"alert alert-danger mt-3\", 4, \"ngIf\"], [\"role\", \"status\", 1, \"spinner-border\", \"spinner-border-sm\", \"me-2\"], [1, \"alert\", \"alert-danger\", \"mt-3\"]],\n      template: function LoginComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4)(5, \"h2\", 5);\n          i0.ɵɵtext(6, \"Login\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(7, \"form\", 6);\n          i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_7_listener() {\n            return ctx.onSubmit();\n          });\n          i0.ɵɵelementStart(8, \"div\", 7)(9, \"label\", 8);\n          i0.ɵɵtext(10, \"Email\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(11, \"input\", 9);\n          i0.ɵɵelementStart(12, \"div\", 10);\n          i0.ɵɵtext(13, \" Please enter a valid email address \");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(14, \"div\", 7)(15, \"label\", 11);\n          i0.ɵɵtext(16, \"Password\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(17, \"input\", 12);\n          i0.ɵɵelementStart(18, \"div\", 10);\n          i0.ɵɵtext(19, \" Password is required \");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(20, \"div\", 13)(21, \"button\", 14);\n          i0.ɵɵtemplate(22, LoginComponent_span_22_Template, 1, 0, \"span\", 15);\n          i0.ɵɵtext(23, \" Login \");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(24, \"div\", 16)(25, \"p\", 17);\n          i0.ɵɵtext(26, \" Don't have an account? \");\n          i0.ɵɵelementStart(27, \"a\", 18);\n          i0.ɵɵtext(28, \"Register\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵtemplate(29, LoginComponent_div_29_Template, 2, 1, \"div\", 19);\n          i0.ɵɵelementEnd()()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n          i0.ɵɵadvance(4);\n          i0.ɵɵclassProp(\"is-invalid\", (ctx.email == null ? null : ctx.email.invalid) && (ctx.email == null ? null : ctx.email.touched));\n          i0.ɵɵadvance(6);\n          i0.ɵɵclassProp(\"is-invalid\", (ctx.password == null ? null : ctx.password.invalid) && (ctx.password == null ? null : ctx.password.touched));\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"disabled\", ctx.loginForm.invalid || ctx.isLoading);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.isLoading);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"ngIf\", ctx.error);\n        }\n      },\n      dependencies: [CommonModule, i5.NgIf, ReactiveFormsModule, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, RouterModule, i3.RouterLink],\n      encapsulation: 2\n    });\n  }\n}\nexport { LoginComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}