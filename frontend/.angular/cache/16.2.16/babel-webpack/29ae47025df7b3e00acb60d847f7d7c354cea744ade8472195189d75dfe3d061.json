{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nlet CartComponent = class CartComponent {\n  constructor(cartService, toastService, authService, router, orderService) {\n    this.cartService = cartService;\n    this.toastService = toastService;\n    this.authService = authService;\n    this.router = router;\n    this.orderService = orderService;\n    this.cartItems = [];\n    this.loading = false;\n    this.error = '';\n  }\n  ngOnInit() {\n    this.loadCart();\n  }\n  loadCart() {\n    this.loading = true;\n    this.error = '';\n    this.cartService.getCart().subscribe({\n      next: items => {\n        this.cartItems = items;\n        this.loading = false;\n      },\n      error: error => {\n        console.error('Error loading cart:', error);\n        this.error = 'Failed to load cart items. Please try again.';\n        this.loading = false;\n      }\n    });\n  }\n  updateQuantity(item, newQuantity) {\n    if (newQuantity < 1) return;\n    this.cartService.updateQuantity(item.productId, newQuantity).subscribe({\n      next: () => {\n        this.loadCart();\n        this.toastService.success('Cart updated successfully');\n      },\n      error: error => {\n        console.error('Error updating quantity:', error);\n        this.toastService.error('Failed to update quantity');\n      }\n    });\n  }\n  removeItem(item) {\n    this.cartService.removeItem(item.productId).subscribe({\n      next: () => {\n        this.loadCart();\n        this.toastService.success('Item removed from cart');\n      },\n      error: error => {\n        console.error('Error removing item:', error);\n        this.toastService.error('Failed to remove item');\n      }\n    });\n  }\n  calculateTotal() {\n    if (!this.cartItems) return 0;\n    return this.cartItems.reduce((total, item) => total + item.price * item.quantity, 0);\n  }\n  checkout() {\n    if (!this.authService.isAuthenticated()) {\n      this.toastService.warning('Please log in to proceed with checkout');\n      this.router.navigate(['/auth/login']);\n      return;\n    }\n    if (!this.cartItems || this.cartItems.length === 0) {\n      this.toastService.warning('Your cart is empty');\n      return;\n    }\n    // Create order from cart items\n    const order = {\n      items: this.cartItems.map(item => ({\n        productId: item.productId,\n        quantity: item.quantity,\n        price: item.price\n      })),\n      total: this.calculateTotal()\n    };\n    // Call the order service to create the order\n    this.orderService.createOrder(order).subscribe({\n      next: response => {\n        this.toastService.success('Order placed successfully!');\n        this.cartService.clearCart().subscribe();\n        this.router.navigate(['/profile']);\n      },\n      error: error => {\n        console.error('Checkout error:', error);\n        this.toastService.error('Failed to place order. Please try again.');\n      }\n    });\n  }\n};\nCartComponent = __decorate([Component({\n  selector: 'app-cart',\n  standalone: true,\n  imports: [CommonModule, FormsModule],\n  template: `\n    <div class=\"container py-5\">\n      <h2 class=\"mb-4\">Shopping Cart</h2>\n      <div *ngIf=\"loading\" class=\"text-center\">\n        <div class=\"spinner-border\" role=\"status\">\n          <span class=\"visually-hidden\">Loading...</span>\n        </div>\n      </div>\n      <div *ngIf=\"error\" class=\"alert alert-danger\">\n        {{error}}\n      </div>\n      <div *ngIf=\"!loading && !error\">\n        <div *ngIf=\"!cartItems || cartItems.length === 0\" class=\"alert alert-info\">\n          Your cart is empty. <a routerLink=\"/products\">Continue shopping</a>\n        </div>\n        <div *ngIf=\"cartItems && cartItems.length > 0\">\n          <div class=\"table-responsive\">\n            <table class=\"table\">\n              <thead>\n                <tr>\n                  <th>Product</th>\n                  <th>Quantity</th>\n                  <th>Price</th>\n                  <th>Total</th>\n                  <th>Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr *ngFor=\"let item of cartItems\">\n                  <td>{{item.name}}</td>\n                  <td>\n                    <div class=\"input-group\" style=\"width: 120px;\">\n                      <button class=\"btn btn-outline-secondary\" type=\"button\" (click)=\"updateQuantity(item, item.quantity - 1)\" [disabled]=\"item.quantity <= 1\">-</button>\n                      <input type=\"number\" class=\"form-control text-center\" [value]=\"item.quantity\" (change)=\"updateQuantity(item, $event.target.value)\">\n                      <button class=\"btn btn-outline-secondary\" type=\"button\" (click)=\"updateQuantity(item, item.quantity + 1)\">+</button>\n                    </div>\n                  </td>\n                  <td>{{item.price | currency}}</td>\n                  <td>{{item.price * item.quantity | currency}}</td>\n                  <td>\n                    <button class=\"btn btn-danger btn-sm\" (click)=\"removeItem(item)\">\n                      <i class=\"fas fa-trash\"></i>\n                    </button>\n                  </td>\n                </tr>\n              </tbody>\n              <tfoot>\n                <tr>\n                  <td colspan=\"3\" class=\"text-end\"><strong>Total:</strong></td>\n                  <td><strong>{{calculateTotal() | currency}}</strong></td>\n                  <td></td>\n                </tr>\n              </tfoot>\n            </table>\n          </div>\n          <div class=\"d-flex justify-content-between mt-4\">\n            <button class=\"btn btn-outline-primary\" routerLink=\"/products\">\n              Continue Shopping\n            </button>\n            <button class=\"btn btn-primary\" (click)=\"checkout()\">\n              Proceed to Checkout\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  `,\n  styles: [`\n    .table th {\n      background-color: #f8f9fa;\n    }\n    .input-group {\n      width: 120px;\n    }\n    .input-group input {\n      text-align: center;\n    }\n  `]\n})], CartComponent);\nexport { CartComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}