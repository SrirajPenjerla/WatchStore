{"ast":null,"code":"import { BehaviorSubject, tap } from 'rxjs';\nimport { environment } from '../../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/auth`;\n    this.isLoggedInSubject = new BehaviorSubject(false);\n    this.isLoggedIn$ = this.isLoggedInSubject.asObservable();\n    // Check if user is logged in on service initialization\n    const token = localStorage.getItem('token');\n    if (token) {\n      this.isLoggedInSubject.next(true);\n    }\n  }\n  login(email, password) {\n    return this.http.post(`${this.apiUrl}/login`, {\n      email,\n      password\n    }).pipe(tap(response => {\n      if (response.token) {\n        localStorage.setItem('token', response.token);\n        this.isLoggedInSubject.next(true);\n      }\n    }));\n  }\n  register(userData) {\n    return this.http.post(`${this.apiUrl}/register`, userData).pipe(tap(response => {\n      if (response.token) {\n        localStorage.setItem('token', response.token);\n        this.isLoggedInSubject.next(true);\n      }\n    }));\n  }\n  logout() {\n    localStorage.removeItem('token');\n    this.isLoggedInSubject.next(false);\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { AuthService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}