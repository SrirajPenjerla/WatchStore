{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nlet CartComponent = class CartComponent {\n  constructor(cartService, toastService, authService, router, orderService) {\n    this.cartService = cartService;\n    this.toastService = toastService;\n    this.authService = authService;\n    this.router = router;\n    this.orderService = orderService;\n    this.cartItems = [];\n    this.isLoading = false;\n    this.error = null;\n  }\n  ngOnInit() {\n    if (!this.authService.isAuthenticated()) {\n      this.toastService.error('Please login to view your cart');\n      this.router.navigate(['/auth/login']);\n      return;\n    }\n    this.loadCart();\n  }\n  loadCart() {\n    this.isLoading = true;\n    this.error = null;\n    this.cartItems = []; // Reset cart items to prevent errors\n    console.log('CartComponent.loadCart() - Fetching cart');\n    this.cartService.getCart().subscribe({\n      next: response => {\n        console.log('CartComponent.loadCart() - Response received:', response);\n        if (response && response.items) {\n          this.cartItems = response.items;\n          console.log('CartComponent.loadCart() - Cart items set:', this.cartItems);\n        } else {\n          console.log('CartComponent.loadCart() - No items in response');\n          this.cartItems = [];\n        }\n        this.isLoading = false;\n      },\n      error: err => {\n        console.error('CartComponent.loadCart() - Error:', err);\n        this.error = 'Failed to load cart. Please try again later.';\n        this.isLoading = false;\n        this.toastService.error('Failed to load cart. Please try again later.');\n        this.cartItems = []; // Reset cart items to prevent errors\n      }\n    });\n  }\n  updateQuantity(item, newQuantity) {\n    if (newQuantity < 1) return;\n    this.cartService.updateQuantity(item.id, newQuantity).subscribe({\n      next: () => {\n        this.loadCart();\n        this.toastService.success('Cart updated successfully');\n      },\n      error: err => {\n        this.toastService.error('Failed to update cart. Please try again.');\n      }\n    });\n  }\n  onQuantityChange(event, item) {\n    const input = event.target;\n    const quantity = parseInt(input.value, 10);\n    if (isNaN(quantity) || quantity < 1) {\n      return;\n    }\n    this.updateQuantity(item, quantity);\n  }\n  removeItem(item) {\n    this.cartService.removeItem(item.id).subscribe({\n      next: () => {\n        this.loadCart();\n        this.toastService.success('Item removed from cart');\n      },\n      error: err => {\n        this.toastService.error('Failed to remove item. Please try again.');\n      }\n    });\n  }\n  getTotal() {\n    if (!this.cartItems) return 0;\n    return this.cartItems.reduce((total, item) => {\n      return total + item.product.price * item.quantity;\n    }, 0);\n  }\n  checkout() {\n    if (!this.authService.isAuthenticated()) {\n      this.toastService.warning('Please log in to proceed with checkout');\n      this.router.navigate(['/auth/login']);\n      return;\n    }\n    if (!this.cartItems || this.cartItems.length === 0) {\n      this.toastService.warning('Your cart is empty');\n      return;\n    }\n    // Create order from cart items\n    const order = {\n      items: this.cartItems.map(item => ({\n        productId: item.productId,\n        quantity: item.quantity,\n        price: item.price\n      })),\n      total: this.calculateTotal()\n    };\n    // Call the order service to create the order\n    this.orderService.createOrder(order).subscribe({\n      next: response => {\n        this.toastService.success('Order placed successfully!');\n        this.cartService.clearCart().subscribe();\n        this.router.navigate(['/profile']);\n      },\n      error: error => {\n        console.error('Checkout error:', error);\n        this.toastService.error('Failed to place order. Please try again.');\n      }\n    });\n  }\n};\nCartComponent = __decorate([Component({\n  selector: 'app-cart',\n  standalone: true,\n  imports: [CommonModule, RouterModule],\n  template: `\n    <div class=\"container py-5\">\n      <h2 class=\"mb-4\">Shopping Cart</h2>\n\n      <div *ngIf=\"isLoading\" class=\"text-center\">\n        <div class=\"spinner-border\" role=\"status\">\n          <span class=\"visually-hidden\">Loading...</span>\n        </div>\n      </div>\n\n      <div *ngIf=\"error\" class=\"alert alert-danger\">\n        {{ error }}\n      </div>\n\n      <div *ngIf=\"!isLoading && !error\">\n        <div *ngIf=\"!cartItems || cartItems.length === 0\" class=\"text-center py-5\">\n          <h3>Your cart is empty</h3>\n          <p class=\"mb-4\">Browse our collection and add some items to your cart.</p>\n          <a routerLink=\"/products\" class=\"btn btn-primary\">Continue Shopping</a>\n        </div>\n\n        <div *ngIf=\"cartItems && cartItems.length > 0\">\n          <div class=\"table-responsive\">\n            <table class=\"table\">\n              <thead>\n                <tr>\n                  <th>Product</th>\n                  <th>Price</th>\n                  <th>Quantity</th>\n                  <th>Total</th>\n                  <th></th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr *ngFor=\"let item of cartItems\">\n                  <td>\n                    <div class=\"d-flex align-items-center\">\n                      <img\n                        [src]=\"item.product.imageUrl\"\n                        [alt]=\"item.product.name\"\n                        class=\"img-thumbnail me-3\"\n                        style=\"width: 80px; height: 80px; object-fit: cover;\"\n                      >\n                      <div>\n                        <h5 class=\"mb-1\">{{ item.product.name }}</h5>\n                        <p class=\"text-muted mb-0\">{{ item.product.brand }}</p>\n                      </div>\n                    </div>\n                  </td>\n                  <td>{{ item.product.price | currency }}</td>\n                  <td>\n                    <div class=\"input-group\" style=\"width: 120px;\">\n                      <button\n                        class=\"btn btn-outline-secondary\"\n                        type=\"button\"\n                        (click)=\"updateQuantity(item, item.quantity - 1)\"\n                        [disabled]=\"item.quantity <= 1\"\n                      >-</button>\n                      <input\n                        type=\"number\"\n                        class=\"form-control text-center\"\n                        [value]=\"item.quantity\"\n                        (change)=\"onQuantityChange($event, item)\"\n                        min=\"1\"\n                        [max]=\"item.product.stockQuantity\"\n                      >\n                      <button\n                        class=\"btn btn-outline-secondary\"\n                        type=\"button\"\n                        (click)=\"updateQuantity(item, item.quantity + 1)\"\n                        [disabled]=\"item.quantity >= item.product.stockQuantity\"\n                      >+</button>\n                    </div>\n                  </td>\n                  <td>{{ item.product.price * item.quantity | currency }}</td>\n                  <td>\n                    <button\n                      class=\"btn btn-outline-danger\"\n                      (click)=\"removeItem(item)\"\n                    >\n                      <i class=\"fas fa-trash\"></i>\n                    </button>\n                  </td>\n                </tr>\n              </tbody>\n              <tfoot>\n                <tr>\n                  <td colspan=\"3\" class=\"text-end\"><strong>Total:</strong></td>\n                  <td><strong>{{ getTotal() | currency }}</strong></td>\n                  <td></td>\n                </tr>\n              </tfoot>\n            </table>\n          </div>\n\n          <div class=\"d-flex justify-content-between align-items-center mt-4\">\n            <a routerLink=\"/products\" class=\"btn btn-outline-primary\">\n              Continue Shopping\n            </a>\n            <button\n              class=\"btn btn-primary\"\n              (click)=\"checkout()\"\n            >\n              Proceed to Checkout\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  `\n})], CartComponent);\nexport { CartComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}