{"ast":null,"code":"import { tap, catchError, map, throwError } from 'rxjs';\nimport { environment } from '../../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass CartService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/cart`;\n  }\n  getCart() {\n    console.log('Fetching cart from API...');\n    return this.http.get(this.apiUrl).pipe(tap(response => {\n      console.log('Cart API response:', response);\n    }), map(response => {\n      // Handle different response formats\n      if (response && Array.isArray(response)) {\n        // If response is an array, assume it's the items array\n        return {\n          id: 0,\n          userId: 0,\n          items: response,\n          total: this.calculateTotal(response)\n        };\n      } else if (response && response.items) {\n        // If response has items property, use it directly\n        return response;\n      } else if (response && response.cartItems) {\n        // If response has cartItems property, map it to our format\n        return {\n          id: response.id || 0,\n          userId: response.userId || 0,\n          items: response.cartItems,\n          total: response.total || this.calculateTotal(response.cartItems)\n        };\n      } else {\n        // If response is empty or in an unknown format, return an empty cart\n        console.warn('Unknown cart response format:', response);\n        return {\n          id: 0,\n          userId: 0,\n          items: [],\n          total: 0\n        };\n      }\n    }), catchError(this.handleError));\n  }\n  addToCart(productId, quantity = 1) {\n    console.log('Adding to cart:', {\n      productId,\n      quantity\n    });\n    return this.http.post(`${this.apiUrl}/items`, {\n      productId,\n      quantity\n    }).pipe(tap(response => {\n      console.log('Add to cart API response:', response);\n    }), map(response => {\n      // Handle different response formats\n      if (response && Array.isArray(response)) {\n        return {\n          id: 0,\n          userId: 0,\n          items: response,\n          total: this.calculateTotal(response)\n        };\n      } else if (response && response.items) {\n        return response;\n      } else if (response && response.cartItems) {\n        return {\n          id: response.id || 0,\n          userId: response.userId || 0,\n          items: response.cartItems,\n          total: response.total || this.calculateTotal(response.cartItems)\n        };\n      } else {\n        console.warn('Unknown cart response format:', response);\n        return {\n          id: 0,\n          userId: 0,\n          items: [],\n          total: 0\n        };\n      }\n    }), catchError(this.handleError));\n  }\n  removeItem(itemId) {\n    console.log('Removing item from cart:', itemId);\n    return this.http.delete(`${this.apiUrl}/items/${itemId}`).pipe(tap(response => {\n      console.log('Remove item API response:', response);\n    }), map(response => {\n      // Handle different response formats\n      if (response && Array.isArray(response)) {\n        return {\n          id: 0,\n          userId: 0,\n          items: response,\n          total: this.calculateTotal(response)\n        };\n      } else if (response && response.items) {\n        return response;\n      } else if (response && response.cartItems) {\n        return {\n          id: response.id || 0,\n          userId: response.userId || 0,\n          items: response.cartItems,\n          total: response.total || this.calculateTotal(response.cartItems)\n        };\n      } else {\n        console.warn('Unknown cart response format:', response);\n        return {\n          id: 0,\n          userId: 0,\n          items: [],\n          total: 0\n        };\n      }\n    }), catchError(this.handleError));\n  }\n  updateQuantity(itemId, quantity) {\n    console.log('Updating quantity:', {\n      itemId,\n      quantity\n    });\n    return this.http.put(`${this.apiUrl}/items/${itemId}`, {\n      quantity\n    }).pipe(tap(response => {\n      console.log('Update quantity API response:', response);\n    }), map(response => {\n      // Handle different response formats\n      if (response && Array.isArray(response)) {\n        return {\n          id: 0,\n          userId: 0,\n          items: response,\n          total: this.calculateTotal(response)\n        };\n      } else if (response && response.items) {\n        return response;\n      } else if (response && response.cartItems) {\n        return {\n          id: response.id || 0,\n          userId: response.userId || 0,\n          items: response.cartItems,\n          total: response.total || this.calculateTotal(response.cartItems)\n        };\n      } else {\n        console.warn('Unknown cart response format:', response);\n        return {\n          id: 0,\n          userId: 0,\n          items: [],\n          total: 0\n        };\n      }\n    }), catchError(this.handleError));\n  }\n  clearCart() {\n    console.log('Clearing cart');\n    return this.http.delete(this.apiUrl).pipe(tap(() => {\n      console.log('Clear cart API response: success');\n    }), catchError(this.handleError));\n  }\n  calculateTotal(items) {\n    if (!items || !Array.isArray(items)) return 0;\n    return items.reduce((total, item) => {\n      return total + (item.product?.price || 0) * (item.quantity || 0);\n    }, 0);\n  }\n  handleError(error) {\n    console.error('Cart service error:', error);\n    let errorMessage = 'An error occurred. Please try again.';\n    if (error.error instanceof ErrorEvent) {\n      // Client-side error\n      errorMessage = error.error.message;\n    } else {\n      // Server-side error\n      if (error.error && error.error.message) {\n        errorMessage = error.error.message;\n      } else if (error.status === 401) {\n        errorMessage = 'You are not authenticated. Please log in.';\n      } else if (error.status === 403) {\n        errorMessage = 'You do not have permission to perform this action.';\n      } else if (error.status === 404) {\n        errorMessage = 'The requested resource was not found.';\n      } else if (error.status === 500) {\n        errorMessage = 'Server error. Please try again later.';\n      }\n    }\n    return throwError(() => errorMessage);\n  }\n  static {\n    this.ɵfac = function CartService_Factory(t) {\n      return new (t || CartService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CartService,\n      factory: CartService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { CartService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}