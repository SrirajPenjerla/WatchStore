{"ast":null,"code":"import { tap, catchError, map, throwError } from 'rxjs';\nimport { environment } from '../../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass CartService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/cart`;\n  }\n  getCart() {\n    console.log('Fetching cart from:', this.apiUrl);\n    return this.http.get(this.apiUrl).pipe(tap(response => console.log('Cart response:', response)), map(response => {\n      if (response && response.cartItems) {\n        return response.cartItems;\n      }\n      return [];\n    }), catchError(this.handleError));\n  }\n  addToCart(productId, quantity) {\n    console.log('Adding to cart:', {\n      productId,\n      quantity\n    });\n    return this.http.post(`${this.apiUrl}/items`, {\n      productId,\n      quantity\n    }).pipe(tap(response => console.log('Add to cart response:', response)), catchError(this.handleError));\n  }\n  updateQuantity(productId, quantity) {\n    console.log('Updating quantity:', {\n      productId,\n      quantity\n    });\n    console.log('API URL:', `${this.apiUrl}/items/${productId}`);\n    // Try using the cart item ID instead of product ID if the API expects that\n    return this.http.put(`${this.apiUrl}/items/${productId}`, {\n      quantity\n    }).pipe(tap(response => console.log('Update quantity response:', response)), catchError(error => {\n      console.error('Error updating quantity:', error);\n      // If we get a 405 error, try an alternative endpoint\n      if (error.status === 405) {\n        console.log('Trying alternative endpoint for update quantity');\n        return this.http.put(`${this.apiUrl}/update`, {\n          productId,\n          quantity\n        }).pipe(tap(response => console.log('Alternative update quantity response:', response)), catchError(this.handleError));\n      }\n      return this.handleError(error);\n    }));\n  }\n  removeItem(productId) {\n    console.log('Removing item:', productId);\n    console.log('API URL:', `${this.apiUrl}/items/${productId}`);\n    // Try using the cart item ID instead of product ID if the API expects that\n    return this.http.delete(`${this.apiUrl}/items/${productId}`).pipe(tap(() => console.log('Item removed successfully')), catchError(error => {\n      console.error('Error removing item:', error);\n      // If we get a 405 error, try an alternative endpoint\n      if (error.status === 405) {\n        console.log('Trying alternative endpoint for remove item');\n        return this.http.delete(`${this.apiUrl}/remove`, {\n          body: {\n            productId\n          }\n        }).pipe(tap(() => console.log('Alternative remove item response: success')), catchError(this.handleError));\n      }\n      return this.handleError(error);\n    }));\n  }\n  clearCart() {\n    return this.http.delete(this.apiUrl).pipe(tap(() => console.log('Cart cleared successfully')), catchError(this.handleError));\n  }\n  calculateTotal(items) {\n    if (!items || !Array.isArray(items)) return 0;\n    return items.reduce((total, item) => {\n      return total + (item.price || 0) * (item.quantity || 0);\n    }, 0);\n  }\n  handleError(error) {\n    console.error('Cart service error:', error);\n    let errorMessage = 'An error occurred. Please try again.';\n    if (error.error instanceof ErrorEvent) {\n      // Client-side error\n      errorMessage = error.error.message;\n    } else {\n      // Server-side error\n      if (error.error && error.error.message) {\n        errorMessage = error.error.message;\n      } else if (error.status === 401) {\n        errorMessage = 'You are not authenticated. Please log in.';\n      } else if (error.status === 403) {\n        errorMessage = 'You do not have permission to perform this action.';\n      } else if (error.status === 404) {\n        errorMessage = 'The requested resource was not found.';\n      } else if (error.status === 405) {\n        errorMessage = 'The requested method is not allowed. Please try again.';\n      } else if (error.status === 500) {\n        errorMessage = 'Server error. Please try again later.';\n      }\n    }\n    return throwError(() => errorMessage);\n  }\n  static {\n    this.ɵfac = function CartService_Factory(t) {\n      return new (t || CartService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CartService,\n      factory: CartService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { CartService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}