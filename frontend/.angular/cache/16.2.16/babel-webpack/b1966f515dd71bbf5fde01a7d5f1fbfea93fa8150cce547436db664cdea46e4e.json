{"ast":null,"code":"import { BehaviorSubject, tap, catchError, throwError } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass AuthService {\n  constructor(http) {\n    this.http = http;\n    this.currentUserSubject = new BehaviorSubject(null);\n    this.currentUser$ = this.currentUserSubject.asObservable();\n    this.authStatusSubject = new BehaviorSubject(false);\n    this.authStatus$ = this.authStatusSubject.asObservable();\n    this.loadUserFromStorage();\n  }\n  loadUserFromStorage() {\n    const token = localStorage.getItem('token');\n    const user = localStorage.getItem('user');\n    if (token && user) {\n      this.currentUserSubject.next(JSON.parse(user));\n      this.authStatusSubject.next(true);\n    }\n  }\n  register(userData) {\n    const url = `${environment.apiUrl}/auth/register`;\n    return this.http.post(url, userData).pipe(tap(response => this.handleAuthentication(response)), catchError(this.handleError));\n  }\n  login(credentials) {\n    const url = `${environment.apiUrl}/auth/login`;\n    return this.http.post(url, credentials).pipe(tap(response => this.handleAuthentication(response)), catchError(this.handleError));\n  }\n  logout() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    this.currentUserSubject.next(null);\n    this.authStatusSubject.next(false);\n  }\n  isAuthenticated() {\n    return this.authStatusSubject.value;\n  }\n  isAdmin() {\n    const user = this.currentUserSubject.value;\n    return user?.email === 'admin@example.com';\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  handleAuthentication(response) {\n    localStorage.setItem('token', response.token);\n    localStorage.setItem('user', JSON.stringify(response.user));\n    this.currentUserSubject.next(response.user);\n    this.authStatusSubject.next(true);\n  }\n  handleError(error) {\n    let errorMessage = 'An error occurred. Please try again.';\n    if (error.error instanceof ErrorEvent) {\n      errorMessage = error.error.message;\n    } else {\n      errorMessage = error.error?.message || errorMessage;\n    }\n    return throwError(() => new Error(errorMessage));\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { AuthService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}