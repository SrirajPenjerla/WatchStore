{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nclass ToastService {\n  constructor() {\n    this.toasts = [];\n    this.toastSubject = new BehaviorSubject([]);\n    this.counter = 0;\n    this.toasts$ = this.toastSubject.asObservable();\n  }\n  show(message, type = 'info', duration = 3000) {\n    const id = this.counter++;\n    const toast = {\n      message,\n      type,\n      duration,\n      id\n    };\n    this.toasts.push(toast);\n    this.toastSubject.next([...this.toasts]);\n    setTimeout(() => {\n      this.remove(id);\n    }, duration);\n  }\n  success(message, duration) {\n    this.show(message, 'success', duration);\n  }\n  error(message, duration) {\n    this.show(message, 'error', duration);\n  }\n  info(message, duration) {\n    this.show(message, 'info', duration);\n  }\n  warning(message, duration) {\n    this.show(message, 'warning', duration);\n  }\n  remove(id) {\n    this.toasts = this.toasts.filter(toast => toast.id !== id);\n    this.toastSubject.next([...this.toasts]);\n  }\n  clear() {\n    this.toasts = [];\n    this.toastSubject.next([]);\n  }\n  static {\n    this.ɵfac = function ToastService_Factory(t) {\n      return new (t || ToastService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ToastService,\n      factory: ToastService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { ToastService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}