{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass ProductService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/products`;\n  }\n  getProducts(filters, sort) {\n    let params = new HttpParams();\n    if (filters) {\n      if (filters.category) params = params.set('category', filters.category);\n      if (filters.brand) params = params.set('brand', filters.brand);\n      if (filters.minPrice) params = params.set('minPrice', filters.minPrice.toString());\n      if (filters.maxPrice) params = params.set('maxPrice', filters.maxPrice.toString());\n      if (filters.search) params = params.set('search', filters.search);\n    }\n    if (sort) {\n      params = params.set('sortBy', sort.field);\n      params = params.set('sortDirection', sort.direction);\n    }\n    return this.http.get(this.apiUrl, {\n      params\n    });\n  }\n  getProduct(id) {\n    return this.http.get(`${this.apiUrl}/${id}`);\n  }\n  getTrendingProducts() {\n    return this.http.get(`${this.apiUrl}/trending`);\n  }\n  createProduct(product) {\n    return this.http.post(this.apiUrl, product);\n  }\n  updateProduct(id, product) {\n    return this.http.put(`${this.apiUrl}/${id}`, product);\n  }\n  deleteProduct(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`);\n  }\n  static {\n    this.ɵfac = function ProductService_Factory(t) {\n      return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ProductService,\n      factory: ProductService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { ProductService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}